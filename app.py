# Sistema de Monitoramento de Financiamento da Sa√∫de - papprefeito
import streamlit as st
import pandas as pd
import json
import os
import sys
import plotly.graph_objects as go
from pyUFbr.baseuf import ufbr
from datetime import datetime
import io

# Imports para gera√ß√£o de PDF
try:
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle, PageBreak
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import mm, inch
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    import plotly.io as pio
    import matplotlib
    matplotlib.use('Agg')  # Backend sem GUI para ambientes de produ√ß√£o
    import matplotlib.pyplot as plt
    import matplotlib.patches as mpatches
    from matplotlib.ticker import FuncFormatter
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False

# Adicionar diret√≥rio pai ao path para importar utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from utils import consultar_api, format_currency, get_latest_competencia
except ImportError:
    try:
        # Fallback se n√£o conseguir importar do utils
        from api_client import consultar_api, get_latest_competencia
        from formatting import format_currency
    except ImportError:
        # Fallback com path absoluto
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        from api_client import consultar_api, get_latest_competencia
        from formatting import format_currency


# Configura√ß√µes Plotly otimizadas inline
PLOTLY_CONFIG = {
    'displayModeBar': True,
    'displaylogo': False,
    'modeBarButtonsToRemove': ['pan2d', 'lasso2d', 'zoomIn2d', 'zoomOut2d', 'autoScale2d'],
    'scrollZoom': True,
    'responsive': True,
    'locale': 'pt-BR'
}

CORES_PADRAO = {
    'positivo': '#1E8449',
    'negativo': '#C0392B',
    'neutro': '#FFC300',
    'destaque': '#3498DB',
    'secundario': '#95A5A6',
    'sucesso': '#27AE60',
    'alerta': '#F39C12',
    'erro': '#E74C3C',
    'info': '#5DADE2'
}

# Carregar dados de configura√ß√£o
def carregar_config():
    """Carrega os dados do arquivo config.json"""
    config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config.json')
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        st.error("Arquivo config.json n√£o encontrado")
        return None
    except json.JSONDecodeError:
        st.error("Erro ao decodificar arquivo config.json")
        return None









def main():
    st.set_page_config(page_title="Mais Gestor - Landing Page", layout="wide")

    # Logo centralizada
    col_logo1, col_logo2, col_logo3 = st.columns([1, 2, 1])
    with col_logo2:
        st.image("logo_colorida_mg.png", width=400)

    # Container principal para sele√ß√µes
    with st.container(border=True):
        st.markdown("### üìç Sele√ß√£o de Munic√≠pio")

        # Layout de colunas otimizado
        col1, col2 = st.columns(2, gap="medium")

        with col1:
            estados = ufbr.list_uf
            uf_selecionada = st.selectbox(
                "üó∫Ô∏è Estado",
                options=estados,
                help="Escolha o estado para consultar dados municipais",
                placeholder="Selecione um estado..."
            )

        with col2:
            municipio_selecionado = None
            if uf_selecionada:
                municipios = ufbr.list_cidades(uf_selecionada)
                municipio_selecionado = st.selectbox(
                    "üèõÔ∏è Munic√≠pio",
                    options=municipios,
                    help="Escolha o munic√≠pio para an√°lise financeira",
                    placeholder="Selecione um munic√≠pio..."
                )
            else:
                st.selectbox(
                    "üèõÔ∏è Munic√≠pio",
                    options=[],
                    help="Primeiro selecione um estado",
                    placeholder="Primeiro selecione um estado...",
                    disabled=True
                )

        # Informa√ß√µes do munic√≠pio (se dispon√≠vel)
        if uf_selecionada and municipio_selecionado:
            st.markdown("---")
            col3, col4 = st.columns(2, gap="medium")

            with col3:
                estrato_placeholder = st.empty()
                estrato_placeholder.text_input(
                    "üìä Estrato",
                    value="-",
                    disabled=True,
                    key="estrato_default",
                    help="Classifica√ß√£o do munic√≠pio por √≠ndice de equidade"
                )

            with col4:
                populacao_placeholder = st.empty()
                populacao_placeholder.text_input(
                    "üë• Popula√ß√£o",
                    value="-",
                    disabled=True,
                    key="populacao_default",
                    help="Popula√ß√£o total do munic√≠pio"
                )

    # Compet√™ncia autom√°tica (n√£o exibida)
    competencia = get_latest_competencia()

    # Consultar dados quando munic√≠pio for selecionado
    if uf_selecionada and municipio_selecionado:
        try:
            codigo_ibge = ufbr.get_cidade(municipio_selecionado).codigo
            codigo_ibge = str(int(float(codigo_ibge)))[:-1]

            # Consultar API automaticamente
            dados = consultar_api(codigo_ibge, competencia)

            if dados:
                # Salvar dados na sess√£o
                st.session_state['dados'] = dados
                st.session_state['municipio_selecionado'] = municipio_selecionado
                st.session_state['uf_selecionada'] = uf_selecionada

                # Atualizar estrato e popula√ß√£o
                pagamentos = dados['pagamentos'][0]
                estrato_valor = pagamentos.get('dsFaixaIndiceEquidadeEsfEap', 'N/A')
                populacao_valor = f"{pagamentos.get('qtPopulacao', 0):,}".replace(',', '.')

                estrato_placeholder.text_input("üìä Estrato", value=estrato_valor, disabled=True, key="estrato_updated")
                populacao_placeholder.text_input("üë• Popula√ß√£o", value=populacao_valor, disabled=True, key="populacao_updated")

                # Espa√ßamento e separador elegante
                st.markdown("<br>", unsafe_allow_html=True)

                # Chamar fun√ß√£o para exibir se√ß√µes da landing page
                exibir_landing_page(dados)

        except AttributeError:
            st.error("‚ö†Ô∏è Erro ao obter c√≥digo IBGE do munic√≠pio. Verifique se o munic√≠pio foi selecionado corretamente.")
        except Exception as e:
            st.error(f"‚ùå Erro ao consultar dados da API: {e}")
            st.info("üí° Tente selecionar outro munic√≠pio ou verifique sua conex√£o com a internet.")

def exibir_landing_page(dados):
    """Exibe apenas o bot√£o de gera√ß√£o de PDF"""
    if not dados or 'pagamentos' not in dados:
        return

    municipio = st.session_state.get('municipio_selecionado', '')
    uf = st.session_state.get('uf_selecionada', '')

    # Espa√ßamento
    st.markdown("<br>", unsafe_allow_html=True)

    # Container destacado para o bot√£o PDF
    with st.container(border=True):
        st.markdown("""
        <div style="text-align: center; margin: 20px 0;">
            <h3 style="color: #2C3E50; font-size: 1.5rem; margin-bottom: 10px;">
                üìÑ Relat√≥rio Detalhado Completo
            </h3>
            <p style="color: #7F8C8D; font-size: 1rem; margin-bottom: 0;">
                Baixe a an√°lise completa em 4 p√°ginas com todos os dados e gr√°ficos
            </p>
        </div>
        """, unsafe_allow_html=True)

        col_pdf1, col_pdf2, col_pdf3 = st.columns([1, 2, 1])

        with col_pdf2:
            if PDF_AVAILABLE:
                if st.button("üì• Gerar Relat√≥rio PDF", type="primary", use_container_width=True):
                    with st.spinner('Gerando relat√≥rio PDF...'):
                        try:
                            pdf_bytes = gerar_relatorio_pdf(dados, municipio, uf)
                            if pdf_bytes:
                                st.download_button(
                                    label="üìÑ Download do Relat√≥rio PDF",
                                    data=pdf_bytes,
                                    file_name=f"relatorio_financeiro_{municipio}_{uf}_{datetime.now().strftime('%Y%m%d')}.pdf",
                                    mime="application/pdf",
                                    type="secondary",
                                    use_container_width=True
                                )
                                st.success("‚úÖ Relat√≥rio gerado com sucesso!")
                            else:
                                st.error("‚ùå Erro ao gerar relat√≥rio PDF")
                        except Exception as e:
                            st.error(f"‚ùå Erro ao gerar PDF: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è Para gerar PDF, instale as depend√™ncias: `pip install reportlab kaleido`")
                st.info("üí° O relat√≥rio PDF cont√©m 4 p√°ginas com an√°lise completa dos dados financeiros")


def gerar_grafico_para_pdf(valor_regular, valor_otimo, classificacao_atual='Regular'):
    """Gera o gr√°fico comparativo usando matplotlib e retorna como bytes para o PDF"""
    if not PDF_AVAILABLE:
        return None

    # Configurar matplotlib para n√£o usar GUI
    plt.ioff()

    # Criar figura
    fig, ax = plt.subplots(figsize=(6.5, 5))

    # Dados para o gr√°fico
    categorias = ['Regular\n(Base)', '√ìtimo\n(Potencial)']
    valores = [valor_regular, valor_otimo]
    cores = [CORES_PADRAO['alerta'], CORES_PADRAO['positivo']]

    # Criar gr√°fico de barras
    bars = ax.bar(categorias, valores, color=cores, width=0.6, edgecolor='white', linewidth=2)

    # Adicionar valores nas barras
    for i, (bar, valor) in enumerate(zip(bars, valores)):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + valor * 0.02,
                format_currency(valor),
                ha='center', va='bottom', fontsize=12, fontweight='bold', color='black')

    # Adicionar anota√ß√£o de diferen√ßa
    diferenca = valor_otimo - valor_regular
    y_pos = (valor_regular + valor_otimo) / 2

    # Seta e caixa de texto para diferen√ßa
    ax.annotate(f'Diferen√ßa\n{format_currency(diferenca)}',
                xy=(0.5, y_pos), xytext=(1.2, y_pos),
                ha='center', va='center',
                bbox=dict(boxstyle="round,pad=0.3", facecolor=CORES_PADRAO['destaque'],
                         edgecolor='white', linewidth=2),
                arrowprops=dict(arrowstyle='->', color=CORES_PADRAO['destaque'], lw=2),
                fontsize=10, fontweight='bold', color='white')

    # Customizar eixos
    ax.set_title('Compara√ß√£o: Regular vs √ìtimo - Potencial de Recursos',
                fontsize=16, fontweight='bold', pad=20, color='#2C3E50')

    ax.set_ylabel('Valor Mensal', fontsize=12, fontweight='bold', color='#2C3E50')

    # Formatador para eixo Y
    def currency_formatter(x, pos):
        return f'R$ {x:,.0f}'.replace(',', '.')

    ax.yaxis.set_major_formatter(FuncFormatter(currency_formatter))

    # Configurar grid e estilo
    ax.grid(axis='y', alpha=0.3, linestyle='--')
    ax.set_axisbelow(True)

    # Remover bordas superiores e direitas
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_color('#cccccc')
    ax.spines['bottom'].set_color('#cccccc')

    # Ajustar margem superior para a anota√ß√£o
    ax.set_ylim(0, max(valores) * 1.15)
    ax.set_xlim(-0.5, 1.8)

    # Configurar layout
    plt.tight_layout()

    # Converter para bytes
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight',
                facecolor='white', edgecolor='none')
    img_buffer.seek(0)
    img_bytes = img_buffer.getvalue()

    # Fechar figura para liberar mem√≥ria
    plt.close(fig)

    return img_bytes

def _adicionar_timbrado_background(canvas, doc):
    """Adiciona timbrado como fundo da p√°gina"""
    try:
        # Verificar se o arquivo timbrado existe
        timbrado_path = 'timbrado.jpg'
        if os.path.exists(timbrado_path):
            # Desenhar timbrado cobrindo toda a p√°gina A4
            canvas.drawImage(timbrado_path,
                           x=0, y=0,
                           width=A4[0], height=A4[1],
                           preserveAspectRatio=True,
                           anchor='c')
    except Exception as e:
        # Se houver erro, continuar sem timbrado
        print(f"Aviso: N√£o foi poss√≠vel carregar timbrado: {e}")

def criar_dashboard_primeira_pagina(municipio, uf, pagamentos):
    """Cria dashboard visual para primeira p√°gina do PDF"""
    if not PDF_AVAILABLE:
        return []

    # Extrair dados
    estrato_valor = pagamentos.get('dsFaixaIndiceEquidadeEsfEap', 'N/A')
    populacao_valor = f"{pagamentos.get('qtPopulacao', 0):,}".replace(',', '.')
    competencia = get_latest_competencia()

    # Determinar cor do estrato baseada no valor
    if 'alto' in estrato_valor.lower():
        cor_estrato = colors.HexColor('#27AE60')  # Verde - positivo
    elif 'm√©dio' in estrato_valor.lower() or 'medio' in estrato_valor.lower():
        cor_estrato = colors.HexColor('#F39C12')  # Laranja - neutro
    elif 'baixo' in estrato_valor.lower():
        cor_estrato = colors.HexColor('#E74C3C')  # Vermelho - negativo
    else:
        cor_estrato = colors.HexColor('#95A5A6')  # Cinza - neutro

    # Estilo para os cards
    card_style = ParagraphStyle(
        'CardStyle',
        fontSize=12,
        textColor=colors.white,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )

    value_style = ParagraphStyle(
        'ValueStyle',
        fontSize=16,
        textColor=colors.white,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold',
        spaceAfter=5
    )

    # Dados dos cards em formato de tabela 2x2
    dashboard_data = [
        [
            # Card Munic√≠pio
            [
                Paragraph("üèõÔ∏è MUNIC√çPIO", card_style),
                Paragraph(f"{municipio}", value_style),
                Paragraph(f"{uf}", card_style)
            ],
            # Card Popula√ß√£o
            [
                Paragraph("üë• POPULA√á√ÉO", card_style),
                Paragraph(f"{populacao_valor}", value_style),
                Paragraph("habitantes", card_style)
            ]
        ],
        [
            # Card Estrato
            [
                Paragraph("üìä ESTRATO", card_style),
                Paragraph(f"{estrato_valor}", value_style),
                Paragraph("classifica√ß√£o", card_style)
            ],
            # Card Compet√™ncia
            [
                Paragraph("üìÖ COMPET√äNCIA", card_style),
                Paragraph(f"{competencia}", value_style),
                Paragraph("per√≠odo", card_style)
            ]
        ]
    ]

    # Criar tabela dashboard
    dashboard_table = Table(dashboard_data, colWidths=[2.5*inch, 2.5*inch], rowHeights=[1.2*inch, 1.2*inch])
    dashboard_table.setStyle(TableStyle([
        # Card Munic√≠pio (azul)
        ('BACKGROUND', (0, 0), (0, 0), colors.HexColor('#3498DB')),
        ('VALIGN', (0, 0), (0, 0), 'MIDDLE'),
        ('ALIGN', (0, 0), (0, 0), 'CENTER'),

        # Card Popula√ß√£o (verde)
        ('BACKGROUND', (1, 0), (1, 0), colors.HexColor('#27AE60')),
        ('VALIGN', (1, 0), (1, 0), 'MIDDLE'),
        ('ALIGN', (1, 0), (1, 0), 'CENTER'),

        # Card Estrato (cor din√¢mica)
        ('BACKGROUND', (0, 1), (0, 1), cor_estrato),
        ('VALIGN', (0, 1), (0, 1), 'MIDDLE'),
        ('ALIGN', (0, 1), (0, 1), 'CENTER'),

        # Card Compet√™ncia (cinza)
        ('BACKGROUND', (1, 1), (1, 1), colors.HexColor('#95A5A6')),
        ('VALIGN', (1, 1), (1, 1), 'MIDDLE'),
        ('ALIGN', (1, 1), (1, 1), 'CENTER'),

        # Espa√ßamento entre cards
        ('LEFTPADDING', (0, 0), (-1, -1), 15),
        ('RIGHTPADDING', (0, 0), (-1, -1), 15),
        ('TOPPADDING', (0, 0), (-1, -1), 15),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 15),

        # Remover bordas da tabela
        ('GRID', (0, 0), (-1, -1), 0, colors.white),
    ]))

    return [dashboard_table]

def gerar_relatorio_pdf(dados, municipio, uf):
    """Gera relat√≥rio PDF de 4 p√°ginas com an√°lise financeira"""
    if not PDF_AVAILABLE:
        st.error("Bibliotecas necess√°rias para PDF n√£o est√£o instaladas. Execute: pip install reportlab")
        return None

    if not dados or 'pagamentos' not in dados:
        st.error("Dados n√£o dispon√≠veis para gerar relat√≥rio")
        return None

    pagamentos = dados['pagamentos'][0]

    # Validar e extrair dados
    try:
        # Calcular valores corrigidos com valida√ß√£o
        vlQualidadeEsf = float(pagamentos.get('vlQualidadeEsf', 0))
        vlPagamentoEmulti = float(pagamentos.get('vlPagamentoEmultiQualidade', 0))
        vlPagamentoEsb = float(pagamentos.get('vlPagamentoEsb40hQualidade', 0))

        valor_atual = vlQualidadeEsf + vlPagamentoEmulti + vlPagamentoEsb

        # Validar se h√° valores v√°lidos
        if valor_atual <= 0:
            st.error("‚ùå Erro: Valores de financiamento n√£o encontrados ou inv√°lidos")
            return None

    except (ValueError, TypeError) as e:
        st.error(f"‚ùå Erro ao processar valores financeiros: {e}")
        return None

    # Obter classifica√ß√£o atual com valida√ß√£o
    classificacao_atual = pagamentos.get('dsClassificacaoQualidadeEsfEap', 'Bom')
    classificacoes_validas = ['√ìtimo', 'Bom', 'Suficiente', 'Regular']

    if classificacao_atual not in classificacoes_validas:
        classificacao_atual = 'Bom'  # Valor padr√£o seguro

    # Valores de refer√™ncia baseados nas portarias oficiais
    # Assumindo principalmente eSF que representa a maior parte dos recursos
    VALORES_REFERENCIA = {
        '√ìtimo': 8000,
        'Bom': 6000,
        'Suficiente': 4000,
        'Regular': 2000
    }

    # Calcular valores baseados na propor√ß√£o real entre classifica√ß√µes
    valor_referencia_atual = VALORES_REFERENCIA.get(classificacao_atual, 6000)
    valor_referencia_otimo = VALORES_REFERENCIA['√ìtimo']
    valor_referencia_regular = VALORES_REFERENCIA['Regular']

    # Calcular valores proporcionais mantendo a base atual
    try:
        fator_multiplicador = valor_atual / valor_referencia_atual if valor_referencia_atual > 0 else 1
        valor_otimo = valor_referencia_otimo * fator_multiplicador
        valor_regular = valor_referencia_regular * fator_multiplicador

        # Validar se os valores calculados s√£o razo√°veis
        if valor_otimo <= 0 or valor_regular < 0:
            st.error("‚ùå Erro: Valores calculados s√£o inv√°lidos")
            return None

        # Calcular diferen√ßa anual do Regular para o √ìtimo
        diferenca_anual = (valor_otimo - valor_regular) * 12

        # Calcular percentual de ganho do Regular para o √ìtimo
        if valor_regular > 0:
            percentual_ganho = ((valor_otimo - valor_regular) / valor_regular) * 100
        else:
            percentual_ganho = 0

        # Validar percentual razo√°vel (m√°ximo 400% que seria de Regular para √ìtimo)
        if percentual_ganho > 500:
            st.warning("‚ö†Ô∏è Aviso: Percentual de ganho muito alto, verifique os dados")

    except (ZeroDivisionError, ValueError) as e:
        st.error(f"‚ùå Erro nos c√°lculos de proje√ß√£o: {e}")
        return None

    # Configurar PDF
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=144, bottomMargin=18)
    story = []
    styles = getSampleStyleSheet()

    # Estilos customizados
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#2C3E50')
    )

    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#34495E')
    )

    highlight_style = ParagraphStyle(
        'Highlight',
        parent=styles['Normal'],
        fontSize=36,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#E74C3C'),
        fontName='Helvetica-Bold'
    )

    # P√ÅGINA 1 - CAPA

    story.append(Spacer(1, 20))
    story.append(Paragraph("Relat√≥rio de An√°lise Financeira", title_style))
    story.append(Paragraph("Sistema de Monitoramento de Financiamento da Sa√∫de", subtitle_style))

    story.append(Spacer(1, 40))

    # Dashboard visual da primeira p√°gina
    dashboard_elements = criar_dashboard_primeira_pagina(municipio, uf, pagamentos)
    for element in dashboard_elements:
        story.append(element)

    story.append(Spacer(1, 30))

    # Informa√ß√µes adicionais
    info_data = [
        ['Data do Relat√≥rio:', datetime.now().strftime('%d/%m/%Y')],
    ]

    info_table = Table(info_data, colWidths=[2*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 12),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))

    story.append(info_table)
    story.append(PageBreak())

    # P√ÅGINA 2 - AN√ÅLISE DE POTENCIAL
    story.append(Paragraph("An√°lise de Potencial de Recursos", title_style))
    story.append(Spacer(1, 30))

    story.append(Paragraph("Potencial de aumento de recursos da classifica√ß√£o Regular para √ìtimo:", subtitle_style))
    story.append(Spacer(1, 20))

    story.append(Paragraph(f"+{percentual_ganho:.1f}%", highlight_style))
    story.append(Spacer(1, 30))

    story.append(Paragraph(f"Este percentual corresponde a <b>{format_currency(diferenca_anual)}</b> anuais que poderiam ser recebidos evoluindo da classifica√ß√£o Regular para √ìtimo.", styles['Normal']))
    story.append(Spacer(1, 20))

    story.append(Paragraph("Este valor adicional poderia fazer uma diferen√ßa significativa na gest√£o da sa√∫de do munic√≠pio, permitindo:", styles['Normal']))
    story.append(Spacer(1, 10))

    beneficios = [
        "‚Ä¢ Amplia√ß√£o dos servi√ßos de aten√ß√£o b√°sica",
        "‚Ä¢ Melhoria da infraestrutura das unidades de sa√∫de",
        "‚Ä¢ Contrata√ß√£o de mais profissionais",
        "‚Ä¢ Investimento em equipamentos e tecnologia",
        "‚Ä¢ Programas de preven√ß√£o e promo√ß√£o da sa√∫de"
    ]

    for beneficio in beneficios:
        story.append(Paragraph(beneficio, styles['Normal']))
        story.append(Spacer(1, 5))

    story.append(PageBreak())

    # P√ÅGINA 3 - GR√ÅFICO E M√âTRICAS
    story.append(Paragraph("Comparativo de Recursos e M√©tricas", title_style))
    story.append(Spacer(1, 20))

    # Adicionar gr√°fico
    try:
        grafico_img = gerar_grafico_para_pdf(valor_regular, valor_otimo, 'Regular')
        if grafico_img:
            img_buffer = io.BytesIO(grafico_img)
            graph_img = Image(img_buffer, width=5*inch, height=3.2*inch)
            graph_img.hAlign = 'CENTER'
            story.append(graph_img)
    except Exception as e:
        story.append(Paragraph(f"Erro ao gerar gr√°fico: {str(e)}", styles['Normal']))

    story.append(Spacer(1, 30))

    # Tabela de m√©tricas
    metricas_data = [
        ['M√©trica', 'Valor', 'Descri√ß√£o'],
        ['Recurso Atual', format_currency(valor_atual), f'Classifica√ß√£o "{classificacao_atual}"'],
        ['Recurso Base (Regular)', format_currency(valor_regular), 'Classifica√ß√£o "Regular"'],
        ['Recurso Potencial (√ìtimo)', format_currency(valor_otimo), 'Classifica√ß√£o "√ìtimo"'],
        ['Acr√©scimo Poss√≠vel', format_currency(valor_otimo - valor_regular), f'+{percentual_ganho:.1f}%'],
        ['Ganho Potencial Anual', format_currency(diferenca_anual), 'Valor adicional anual (Regular ‚Üí √ìtimo)']
    ]

    metricas_table = Table(metricas_data, colWidths=[2*inch, 1.5*inch, 2.5*inch])
    metricas_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498DB')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))

    story.append(metricas_table)
    story.append(PageBreak())

    # P√ÅGINA 4 - CONCLUS√ïES E RECOMENDA√á√ïES
    story.append(Paragraph("Conclus√µes e Recomenda√ß√µes", title_style))
    story.append(Spacer(1, 30))

    story.append(Paragraph("Resumo Executivo", subtitle_style))
    story.append(Paragraph(f"O munic√≠pio de {municipio}/{uf} tem potencial para aumentar seus recursos em <b>{format_currency(valor_otimo - valor_regular)}</b> mensais, representando um acr√©scimo de <b>{percentual_ganho:.1f}%</b> evoluindo da classifica√ß√£o Regular para √ìtimo.", styles['Normal']))
    story.append(Spacer(1, 20))

    story.append(Paragraph("Benef√≠cios Esperados", subtitle_style))
    story.append(Paragraph("‚Ä¢ <b>Mais recursos:</b> Aumento significativo no financiamento da sa√∫de", styles['Normal']))
    story.append(Paragraph("‚Ä¢ <b>Melhor qualidade:</b> Eleva√ß√£o dos indicadores de qualidade da aten√ß√£o b√°sica", styles['Normal']))
    story.append(Paragraph("‚Ä¢ <b>Popula√ß√£o beneficiada:</b> Melhoria no atendimento para toda a popula√ß√£o", styles['Normal']))
    story.append(Spacer(1, 20))

    story.append(Paragraph("Recomenda√ß√µes", subtitle_style))
    story.append(Paragraph("1. Implementar a√ß√µes para melhoria dos indicadores de qualidade", styles['Normal']))
    story.append(Paragraph("2. Investir na capacita√ß√£o das equipes de sa√∫de", styles['Normal']))
    story.append(Paragraph("3. Modernizar os processos e sistemas de gest√£o", styles['Normal']))
    story.append(Paragraph("4. Monitorar continuamente os indicadores", styles['Normal']))
    story.append(Spacer(1, 40))

    story.append(Paragraph("Sistema de Monitoramento de Financiamento da Sa√∫de", subtitle_style))

    # Construir PDF com timbrado de fundo
    doc.build(story,
             onFirstPage=_adicionar_timbrado_background,
             onLaterPages=_adicionar_timbrado_background)
    buffer.seek(0)
    return buffer.getvalue()

if __name__ == "__main__":
    main()