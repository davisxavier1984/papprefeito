"""
Cliente robusto para comunica√ß√£o com a API de financiamento da sa√∫de - papprefeito
"""
import streamlit as st
import requests
import json
import time
from typing import Optional, Dict, Any
from requests.exceptions import RequestException, Timeout, ConnectionError
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# Nome do arquivo JSON para armazenar os dados da API
DATA_FILE = "data_cache_papprefeito.json"

class APIClient:
    """Cliente robusto para comunica√ß√£o com a API de financiamento da sa√∫de."""
    
    def __init__(self):
        self.base_url = "https://relatorioaps-prd.saude.gov.br/financiamento/pagamento"
        self.session = self._create_session()
    
    def _create_session(self) -> requests.Session:
        """Cria uma sess√£o HTTP com configura√ß√µes de retry e timeout."""
        session = requests.Session()
        
        # Configurar estrat√©gia de retry
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        
        # Headers padr√£o
        session.headers.update({
            "Accept": "application/json",
            "User-Agent": "papprefeito-ConsultaDados/1.0"
        })
        
        return session
    
    def validar_dados_api(self, dados: Dict[Any, Any]) -> bool:
        """Valida se os dados retornados da API est√£o no formato esperado."""
        if not isinstance(dados, dict):
            return False
        
        # Verificar se cont√©m pelo menos uma das chaves esperadas
        expected_keys = ['resumosPlanosOrcamentarios', 'pagamentos']
        return any(key in dados for key in expected_keys)

def load_data_from_json() -> Dict[str, Any]:
    """Carrega os dados do arquivo JSON de cache. Retorna um dicion√°rio vazio se o arquivo n√£o existir."""
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            dados = json.load(f)
            
        # Validar dados carregados
        api_client = APIClient()
        if not api_client.validar_dados_api(dados):
            st.warning("‚ö†Ô∏è Dados em cache podem estar corrompidos.")
            return {}
            
        return dados
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        st.warning("‚ö†Ô∏è Erro ao decodificar o arquivo de cache. O arquivo pode estar corrompido.")
        return {}

def consultar_api(codigo_ibge: str, competencia: str) -> Optional[Dict[str, Any]]:
    """Consulta a API de financiamento da sa√∫de e salva os dados em um arquivo JSON."""
    
    # Validar par√¢metros de entrada
    if not codigo_ibge or not competencia:
        st.error("‚ùå C√≥digo IBGE e compet√™ncia s√£o obrigat√≥rios.")
        return None
    
    if len(codigo_ibge) < 6:
        st.error("‚ùå C√≥digo IBGE deve ter pelo menos 6 d√≠gitos.")
        return None
    
    if len(competencia) != 6 or not competencia.isdigit():
        st.error("‚ùå Compet√™ncia deve estar no formato AAAAMM (6 d√≠gitos).")
        return None
    
    # Atualizar session_state
    if 'competencia' in st.session_state:
        st.session_state['competencia'] = competencia

    api_client = APIClient()
    
    params = {
        "unidadeGeografica": "MUNICIPIO",
        "coUf": codigo_ibge[:2],
        "coMunicipio": codigo_ibge[:6],
        "nuParcelaInicio": competencia,
        "nuParcelaFim": competencia,
        "tipoRelatorio": "COMPLETO"
    }
    
    try:
        # Mostrar progresso
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        status_text.text("üîÑ Conectando √† API...")
        progress_bar.progress(25)
        
        # Fazer requisi√ß√£o com timeout
        response = api_client.session.get(
            api_client.base_url, 
            params=params, 
            timeout=30,
            verify=True
        )
        
        progress_bar.progress(50)
        status_text.text("üì• Recebendo dados...")
        
        response.raise_for_status()
        dados = response.json()
        
        progress_bar.progress(75)
        status_text.text("‚úÖ Validando dados...")
        
        # Validar dados recebidos
        if not api_client.validar_dados_api(dados):
            st.error("‚ùå Dados recebidos da API est√£o em formato inv√°lido.")
            return None
        
        # Verificar se h√° dados relevantes
        resumos = dados.get('resumosPlanosOrcamentarios', [])
        pagamentos = dados.get('pagamentos', [])
        
        if not resumos and not pagamentos:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado para os par√¢metros informados.")
            return None
        
        progress_bar.progress(90)
        status_text.text("üíæ Salvando cache...")
        
        # Salvar dados em cache
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(dados, f, ensure_ascii=False, indent=4)
        
        progress_bar.progress(100)
        status_text.text("‚úÖ Consulta conclu√≠da com sucesso!")
        
        # Limpar elementos de progresso ap√≥s um breve delay
        time.sleep(1)
        progress_bar.empty()
        status_text.empty()
        
        st.success(f"‚úÖ Dados da compet√™ncia {competencia} para o IBGE {codigo_ibge} consultados com sucesso!")
        return dados
        
    except Timeout:
        st.error("‚è±Ô∏è Timeout na consulta √† API. Tente novamente em alguns minutos.")
        return None
    except ConnectionError:
        st.error("üåê Erro de conex√£o. Verifique sua conex√£o com a internet.")
        return None
    except requests.exceptions.SSLError:
        st.error("üîí Erro de certificado SSL. Verifique a configura√ß√£o do servidor.")
        return None
    except RequestException as e:
        st.error(f"‚ùå Erro na consulta √† API: {str(e)}")
        return None
    except json.JSONDecodeError:
        st.error("‚ùå Erro ao decodificar resposta da API. Dados podem estar corrompidos.")
        return None
    except Exception as e:
        st.error(f"‚ùå Erro inesperado: {str(e)}")
        return None